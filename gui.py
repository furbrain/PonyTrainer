#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.9.4 on Sat Nov 16 21:06:33 2019
#

import wx
import wx.adv

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
from svxtextctrl import SVXTextCtrl
import wx.lib.docview
# end wxGlade


class PonyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: PonyFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((800, 600))
        
        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_NEW, "&New", "")
        self.Bind(wx.EVT_MENU, self.OnNew, id=wx.ID_NEW)
        wxglade_tmp_menu.Append(wx.ID_OPEN, "&Open", "")
        self.Bind(wx.EVT_MENU, self.OnOpen, id=wx.ID_OPEN)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "&Import\tCtrl-I", "")
        self.Bind(wx.EVT_MENU, self.Import, id=item.GetId())
        wxglade_tmp_menu.Append(wx.ID_REVERT, "&Revert", "")
        self.Bind(wx.EVT_MENU, self.OnRevert, id=wx.ID_REVERT)
        wxglade_tmp_menu.Append(wx.ID_SAVE, "&Save", "")
        self.Bind(wx.EVT_MENU, self.OnSave, id=wx.ID_SAVE)
        wxglade_tmp_menu.Append(wx.ID_SAVEAS, "Save &as", "")
        self.Bind(wx.EVT_MENU, self.OnSaveAs, id=wx.ID_SAVEAS)
        wxglade_tmp_menu.Append(wx.ID_CLOSE, "&Close", "")
        self.Bind(wx.EVT_MENU, self.OnClose, id=wx.ID_CLOSE)
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.ID_EXIT, "&Quit", "")
        self.Bind(wx.EVT_MENU, self.Quit, id=wx.ID_EXIT)
        self.frame_menubar.Append(wxglade_tmp_menu, "&File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_CUT, "Cu&t\tCtrl-X", "")
        self.Bind(wx.EVT_MENU, self.OnCut, id=wx.ID_CUT)
        wxglade_tmp_menu.Append(wx.ID_COPY, "&Copy", "")
        self.Bind(wx.EVT_MENU, self.OnCopy, id=wx.ID_COPY)
        wxglade_tmp_menu.Append(wx.ID_PASTE, "&Paste", "")
        self.Bind(wx.EVT_MENU, self.OnPaste, id=wx.ID_PASTE)
        self.frame_menubar.Append(wxglade_tmp_menu, "&Edit")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "&Settings", "")
        self.Bind(wx.EVT_MENU, self.DeviceSettings, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "&Upload Firmware", "")
        self.Bind(wx.EVT_MENU, self.DeviceUploadFirmware, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "&Device")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_HELP, "&Manual", "")
        self.Bind(wx.EVT_MENU, self.ShowManual, id=wx.ID_HELP)
        wxglade_tmp_menu.Append(wx.ID_ABOUT, "&About", "")
        self.Bind(wx.EVT_MENU, self.About, id=wx.ID_ABOUT)
        self.frame_menubar.Append(wxglade_tmp_menu, "&Help")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        self.frame_statusbar = self.CreateStatusBar(2)
        
        # Tool Bar
        self.frame_toolbar = wx.ToolBar(self, -1)
        self.SetToolBar(self.frame_toolbar)
        self.frame_toolbar.AddTool(wx.ID_SAVEAS, "Save", wx.ArtProvider.GetBitmap(wx.ART_FILE_SAVE_AS, wx.ART_TOOLBAR, wx.DefaultSize), wx.NullBitmap, wx.ITEM_NORMAL, "Save", "")
        self.frame_toolbar.AddTool(wx.ID_BOTTOM, "Import", wx.ArtProvider.GetBitmap(wx.ART_GO_DOWN, wx.ART_TOOLBAR, wx.DefaultSize), wx.NullBitmap, wx.ITEM_NORMAL, "Import from Pony", "")
        self.frame_toolbar.AddTool(wx.ID_EXIT, "Quit", wx.ArtProvider.GetBitmap(wx.ART_QUIT, wx.ART_TOOLBAR, wx.DefaultSize), wx.NullBitmap, wx.ITEM_NORMAL, "Quit", "")
        self.frame_toolbar.AddSeparator()
        self.frame_toolbar.AddTool(wx.ID_CUT, "Cut", wx.ArtProvider.GetBitmap(wx.ART_CUT, wx.ART_TOOLBAR, wx.DefaultSize), wx.NullBitmap, wx.ITEM_NORMAL, "Cut", "")
        self.frame_toolbar.AddTool(wx.ID_COPY, "Copy", wx.ArtProvider.GetBitmap(wx.ART_COPY, wx.ART_TOOLBAR, wx.DefaultSize), wx.NullBitmap, wx.ITEM_NORMAL, "Copy", "")
        self.frame_toolbar.AddTool(wx.ID_PASTE, "Paste", wx.ArtProvider.GetBitmap(wx.ART_PASTE, wx.ART_TOOLBAR, wx.DefaultSize), wx.NullBitmap, wx.ITEM_NORMAL, "Paste", "")
        # Tool Bar end
        self.notebook = wx.Notebook(self, wx.ID_ANY)
        self.notebook_first_pane = wx.Panel(self.notebook, wx.ID_ANY)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TOOL, self.OnSave, id=wx.ID_SAVEAS)
        self.Bind(wx.EVT_TOOL, self.Import, id=wx.ID_BOTTOM)
        self.Bind(wx.EVT_TOOL, self.Quit, id=wx.ID_EXIT)
        self.Bind(wx.EVT_TOOL, self.OnCut, id=wx.ID_CUT)
        self.Bind(wx.EVT_TOOL, self.OnCopy, id=wx.ID_COPY)
        self.Bind(wx.EVT_TOOL, self.OnPaste, id=wx.ID_PASTE)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: PonyFrame.__set_properties
        self.SetTitle("PonyTrainer")
        self.frame_statusbar.SetStatusWidths([-1, -1])

        # statusbar fields
        frame_statusbar_fields = ["Connected", "Pony:"]
        for i in range(len(frame_statusbar_fields)):
            self.frame_statusbar.SetStatusText(frame_statusbar_fields[i], i)
        self.frame_toolbar.Realize()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: PonyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        self.notebook.AddPage(self.notebook_first_pane, "Untitled")
        sizer_1.Add(self.notebook, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def OnNew(self, event):  # wxGlade: PonyFrame.<event_handler>
        print("Event handler 'OnNew' not implemented!")
        event.Skip()

    def OnOpen(self, event):  # wxGlade: PonyFrame.<event_handler>
        print("Event handler 'OnOpen' not implemented!")
        event.Skip()

    def Import(self, event):  # wxGlade: PonyFrame.<event_handler>
        print("Event handler 'Import' not implemented!")
        event.Skip()

    def OnRevert(self, event):  # wxGlade: PonyFrame.<event_handler>
        print("Event handler 'OnRevert' not implemented!")
        event.Skip()

    def OnSave(self, event):  # wxGlade: PonyFrame.<event_handler>
        print("Event handler 'OnSave' not implemented!")
        event.Skip()

    def OnSaveAs(self, event):  # wxGlade: PonyFrame.<event_handler>
        print("Event handler 'OnSaveAs' not implemented!")
        event.Skip()

    def OnClose(self, event):  # wxGlade: PonyFrame.<event_handler>
        print("Event handler 'OnClose' not implemented!")
        event.Skip()

    def Quit(self, event):  # wxGlade: PonyFrame.<event_handler>
        print("Event handler 'Quit' not implemented!")
        event.Skip()

    def OnCut(self, event):  # wxGlade: PonyFrame.<event_handler>
        print("Event handler 'OnCut' not implemented!")
        event.Skip()

    def OnCopy(self, event):  # wxGlade: PonyFrame.<event_handler>
        print("Event handler 'OnCopy' not implemented!")
        event.Skip()

    def OnPaste(self, event):  # wxGlade: PonyFrame.<event_handler>
        print("Event handler 'OnPaste' not implemented!")
        event.Skip()

    def DeviceSettings(self, event):  # wxGlade: PonyFrame.<event_handler>
        print("Event handler 'DeviceSettings' not implemented!")
        event.Skip()

    def DeviceUploadFirmware(self, event):  # wxGlade: PonyFrame.<event_handler>
        print("Event handler 'DeviceUploadFirmware' not implemented!")
        event.Skip()

    def ShowManual(self, event):  # wxGlade: PonyFrame.<event_handler>
        print("Event handler 'ShowManual' not implemented!")
        event.Skip()

    def About(self, event):  # wxGlade: PonyFrame.<event_handler>
        print("Event handler 'About' not implemented!")
        event.Skip()

# end of class PonyFrame

class AboutDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: AboutDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((412, 147))
        self.hyperlink_1 = wx.adv.HyperlinkCtrl(self, wx.ID_ANY, "http://www.shetlandattackpony.co.uk/", "", style=wx.adv.HL_ALIGN_CENTRE)
        self.button_1 = wx.Button(self, wx.ID_OK, "")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: AboutDialog.__set_properties
        self.SetTitle("About")
        self.SetSize((412, 147))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: AboutDialog.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        label_1 = wx.StaticText(self, wx.ID_ANY, "PonyTrainer v0.8", style=wx.ALIGN_CENTER)
        sizer_2.Add(label_1, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_2.Add(self.hyperlink_1, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        label_2 = wx.StaticText(self, wx.ID_ANY, u"Â© 2019 Phil Underwood", style=wx.ALIGN_CENTER)
        sizer_2.Add(label_2, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_2.Add(self.button_1, 0, wx.ALIGN_CENTER | wx.ALL, 1)
        self.SetSizer(sizer_2)
        self.Layout()
        self.Centre()
        # end wxGlade

# end of class AboutDialog

class ImportDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ImportDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE | wx.RESIZE_BORDER
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((545, 427))
        self.survey_list = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_SORT_DESCENDING | wx.LC_VRULES)
        self.edit_btn = wx.RadioButton(self, wx.ID_ANY, "Edit", style=wx.RB_GROUP)
        self.extract_btn = wx.RadioButton(self, wx.ID_ANY, "Extract")
        self.advanced = wx.CheckBox(self, wx.ID_ANY, "Advanced")
        self.advanced_controls = wx.Panel(self, wx.ID_ANY)
        self.angles = wx.RadioBox(self.advanced_controls, wx.ID_ANY, "Angles", choices=["From Pony", "Polar", "Grad", "Cartesian"], majorDimension=1, style=wx.RA_SPECIFY_COLS)
        self.units = wx.RadioBox(self.advanced_controls, wx.ID_ANY, "Length Units", choices=["From Pony", "Metric", "Imperial"], majorDimension=1, style=wx.RA_SPECIFY_COLS)
        self.button_2 = wx.Button(self, wx.ID_OK, "")
        self.button_3 = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHECKBOX, lambda x: (self.advanced_controls.Show(x.IsChecked()), self.__do_layout()), self.advanced)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ImportDialog.__set_properties
        self.SetTitle("Import Surveys")
        self.SetSize((545, 427))
        self.survey_list.AppendColumn("Date", format=wx.LIST_FORMAT_LEFT, width=-1)
        self.survey_list.AppendColumn("Stations", format=wx.LIST_FORMAT_LEFT, width=-1)
        self.survey_list.AppendColumn("Legs", format=wx.LIST_FORMAT_LEFT, width=-1)
        self.angles.SetSelection(0)
        self.units.SetSelection(0)
        self.advanced_controls.Hide()
        self.button_2.SetDefault()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ImportDialog.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Surveys"), wx.HORIZONTAL)
        sizer_6.Add(self.survey_list, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_6, 1, wx.ALL | wx.EXPAND, 3)
        sizer_5.Add(self.edit_btn, 0, 0, 0)
        sizer_5.Add(self.extract_btn, 0, 0, 0)
        sizer_3.Add(sizer_5, 0, wx.ALL, 3)
        sizer_3.Add(self.advanced, 0, wx.ALL, 3)
        sizer6.Add(self.angles, 1, wx.ALL | wx.EXPAND, 3)
        sizer6.Add(self.units, 1, wx.ALL | wx.EXPAND, 3)
        self.advanced_controls.SetSizer(sizer6)
        sizer_3.Add(self.advanced_controls, 1, wx.ALL | wx.EXPAND, 3)
        sizer_4.Add(self.button_2, 0, 0, 0)
        sizer_4.Add(self.button_3, 0, 0, 0)
        sizer_3.Add(sizer_4, 0, wx.ALIGN_RIGHT | wx.ALL, 3)
        self.SetSizer(sizer_3)
        self.Layout()
        # end wxGlade

# end of class ImportDialog

class DeviceSettingsDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: DeviceSettingsDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((304, 251))
        self.length_units = wx.Choice(self, wx.ID_ANY, choices=["Metric", "Imperial"])
        self.angular_units = wx.Choice(self, wx.ID_ANY, choices=["Polar", "Grads", "Cartesian"])
        self.display_size = wx.Choice(self, wx.ID_ANY, choices=["Large", "Small"])
        self.choice_4 = wx.Choice(self, wx.ID_ANY, choices=["30 s", "60 s", "2 mins", "5 mins", "10 mins"])
        self.button_4 = wx.Button(self, wx.ID_OK, "")
        self.button_5 = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: DeviceSettingsDialog.__set_properties
        self.SetTitle("Device Settings")
        self.SetSize((304, 251))
        self.length_units.SetToolTip("Imperial = results are displayed in decimal feet")
        self.length_units.SetSelection(0)
        self.angular_units.SetToolTip("Polar - display bearing and inclination in degrees (360 in a circle)\nGrads - display bearing and inclination in grads (400 in a circle)\nCartesian - display distances in easting, northing, and vertical offset")
        self.angular_units.SetSelection(0)
        self.display_size.SetToolTip("Large - readings are shown one at a time\nSmall - readings are all shown together on one screen")
        self.display_size.SetSelection(0)
        self.choice_4.SetSelection(2)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: DeviceSettingsDialog.__do_layout
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.FlexGridSizer(0, 2, 5, 5)
        label_3 = wx.StaticText(self, wx.ID_ANY, "Length Units", style=wx.ALIGN_RIGHT)
        grid_sizer_1.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.length_units, 0, 0, 0)
        label_4 = wx.StaticText(self, wx.ID_ANY, "Angular Units")
        grid_sizer_1.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.angular_units, 0, 0, 0)
        label_5 = wx.StaticText(self, wx.ID_ANY, "DIsplay Size")
        grid_sizer_1.Add(label_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.display_size, 0, 0, 0)
        label_6 = wx.StaticText(self, wx.ID_ANY, "Time Out")
        grid_sizer_1.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.choice_4, 0, 0, 0)
        sizer_9.Add(grid_sizer_1, 1, wx.ALIGN_CENTER | wx.ALL, 3)
        sizer_10.Add(self.button_4, 0, wx.ALIGN_BOTTOM | wx.ALL, 3)
        sizer_10.Add(self.button_5, 0, wx.ALIGN_BOTTOM | wx.ALL, 3)
        sizer_9.Add(sizer_10, 1, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.ALL, 3)
        self.SetSizer(sizer_9)
        self.Layout()
        # end wxGlade

# end of class DeviceSettingsDialog

if __name__ == "__main__":
    PonyTrainer = wx.PySimpleApp()
    frame = PonyFrame(None, wx.ID_ANY, "")
    PonyTrainer.SetTopWindow(frame)
    frame.Show()
    PonyTrainer.MainLoop()

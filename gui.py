#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.8.0 on Sun Jan 27 00:07:07 2019
#

import wx

# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((400, 313))
        
        # Menu Bar
        self.frame_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "&Import", "")
        self.Bind(wx.EVT_MENU, self.Import, id=item.GetId())
        wxglade_tmp_menu.Append(wx.ID_SAVEAS, "Save &as", "")
        self.Bind(wx.EVT_MENU, self.SaveAs, id=wx.ID_SAVEAS)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "&Preferences", "")
        self.Bind(wx.EVT_MENU, self.SetPreferences, id=item.GetId())
        wxglade_tmp_menu.AppendSeparator()
        wxglade_tmp_menu.Append(wx.ID_EXIT, "&Quit", "")
        self.Bind(wx.EVT_MENU, self.Quit, id=wx.ID_EXIT)
        self.frame_menubar.Append(wxglade_tmp_menu, "&File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_CUT, "Cu&t", "")
        self.Bind(wx.EVT_MENU, self.Cut, id=wx.ID_CUT)
        wxglade_tmp_menu.Append(wx.ID_COPY, "&Copy", "")
        self.Bind(wx.EVT_MENU, self.Copy, id=wx.ID_COPY)
        wxglade_tmp_menu.Append(wx.ID_PASTE, "&Paste", "")
        self.Bind(wx.EVT_MENU, self.Paste, id=wx.ID_PASTE)
        self.frame_menubar.Append(wxglade_tmp_menu, "&Edit")
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "&Settings", "")
        self.Bind(wx.EVT_MENU, self.DeviceSettings, id=item.GetId())
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "&Upload Firmware", "")
        self.Bind(wx.EVT_MENU, self.DeviceUploadFirmware, id=item.GetId())
        self.frame_menubar.Append(wxglade_tmp_menu, "&Device")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu.Append(wx.ID_HELP, "&Manual", "")
        self.Bind(wx.EVT_MENU, self.ShowManual, id=wx.ID_HELP)
        wxglade_tmp_menu.Append(wx.ID_ABOUT, "&About", "")
        self.Bind(wx.EVT_MENU, self.About, id=wx.ID_ABOUT)
        self.frame_menubar.Append(wxglade_tmp_menu, "&Help")
        self.SetMenuBar(self.frame_menubar)
        # Menu Bar end
        self.frame_statusbar = self.CreateStatusBar(1)
        
        # Tool Bar
        self.frame_toolbar = wx.ToolBar(self, -1)
        self.SetToolBar(self.frame_toolbar)
        self.frame_toolbar.AddLabelTool(wx.ID_SAVEAS, "Save As", wx.ArtProvider.GetBitmap(wx.ART_FILE_SAVE_AS, wx.ART_TOOLBAR, wx.DefaultSize), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.frame_toolbar.AddLabelTool(wx.ID_EXIT, "Quit", wx.ArtProvider.GetBitmap(wx.ART_QUIT, wx.ART_TOOLBAR, wx.DefaultSize), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.frame_toolbar.AddSeparator()
        self.frame_toolbar.AddLabelTool(wx.ID_CUT, "Cut", wx.ArtProvider.GetBitmap(wx.ART_CUT, wx.ART_TOOLBAR, wx.DefaultSize), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.frame_toolbar.AddLabelTool(wx.ID_COPY, "Copy", wx.ArtProvider.GetBitmap(wx.ART_COPY, wx.ART_TOOLBAR, wx.DefaultSize), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        self.frame_toolbar.AddLabelTool(wx.ID_PASTE, "Paste", wx.ArtProvider.GetBitmap(wx.ART_PASTE, wx.ART_TOOLBAR, wx.DefaultSize), wx.NullBitmap, wx.ITEM_NORMAL, "", "")
        # Tool Bar end
        self.documents = wx.Notebook(self, wx.ID_ANY)
        self.label_7 = wx.StaticText(self.documents, wx.ID_ANY, "No text yet")

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TOOL, self.SaveAs, id=wx.ID_SAVEAS)
        self.Bind(wx.EVT_TOOL, self.Quit, id=wx.ID_EXIT)
        self.Bind(wx.EVT_TOOL, self.Cut, id=wx.ID_CUT)
        self.Bind(wx.EVT_TOOL, self.Copy, id=wx.ID_COPY)
        self.Bind(wx.EVT_TOOL, self.Paste, id=wx.ID_PASTE)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("PonyTrainer")
        self.frame_statusbar.SetStatusWidths([-1])

        # statusbar fields
        frame_statusbar_fields = ["Connected"]
        for i in range(len(frame_statusbar_fields)):
            self.frame_statusbar.SetStatusText(frame_statusbar_fields[i], i)
        self.frame_toolbar.Realize()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.HORIZONTAL)
        self.documents.AddPage(self.label_7, "notebook_1_pane_1")
        sizer_1.Add(self.documents, 1, wx.EXPAND, 0)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade

    def Import(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'Import' not implemented!")
        event.Skip()

    def SaveAs(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'SaveAs' not implemented!")
        event.Skip()

    def SetPreferences(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'SetPreferences' not implemented!")
        event.Skip()

    def Quit(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'Quit' not implemented!")
        event.Skip()

    def Cut(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'Cut' not implemented!")
        event.Skip()

    def Copy(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'Copy' not implemented!")
        event.Skip()

    def Paste(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'Paste' not implemented!")
        event.Skip()

    def DeviceSettings(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'DeviceSettings' not implemented!")
        event.Skip()

    def DeviceUploadFirmware(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'DeviceUploadFirmware' not implemented!")
        event.Skip()

    def ShowManual(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'ShowManual' not implemented!")
        event.Skip()

    def About(self, event):  # wxGlade: MainFrame.<event_handler>
        print("Event handler 'About' not implemented!")
        event.Skip()

# end of class MainFrame

class AboutDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: AboutDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((412, 147))
        self.hyperlink_1 = wx.HyperlinkCtrl(self, wx.ID_ANY, "http://www.shetlandattackpony.co.uk/", "", style=wx.HL_ALIGN_CENTRE)
        self.button_1 = wx.Button(self, wx.ID_OK, "")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: AboutDialog.__set_properties
        self.SetTitle("About")
        self.SetSize((412, 147))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: AboutDialog.__do_layout
        sizer_2 = wx.BoxSizer(wx.VERTICAL)
        label_1 = wx.StaticText(self, wx.ID_ANY, "PonyTrainer v0.8", style=wx.ALIGN_CENTER)
        sizer_2.Add(label_1, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_2.Add(self.hyperlink_1, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        label_2 = wx.StaticText(self, wx.ID_ANY, u"\u00a9 2019 Phil Underwood", style=wx.ALIGN_CENTER)
        sizer_2.Add(label_2, 1, wx.ALIGN_CENTER | wx.EXPAND, 0)
        sizer_2.Add(self.button_1, 0, wx.ALIGN_CENTER | wx.ALL, 1)
        self.SetSizer(sizer_2)
        self.Layout()
        self.Centre()
        # end wxGlade

# end of class AboutDialog

class ImportDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ImportDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((300, 400))
        self.survey_list = wx.ListCtrl(self, wx.ID_ANY, style=wx.LC_HRULES | wx.LC_REPORT | wx.LC_SORT_DESCENDING | wx.LC_VRULES)
        self.edit_btn = wx.RadioButton(self, wx.ID_ANY, "Edit", style=wx.RB_GROUP)
        self.extract_btn = wx.RadioButton(self, wx.ID_ANY, "Extract")
        self.button_2 = wx.Button(self, wx.ID_OK, "")
        self.button_3 = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ImportDialog.__set_properties
        self.SetTitle("Import Surveys")
        self.SetSize((300, 400))
        self.survey_list.InsertColumn(0, "Date", format=wx.LIST_FORMAT_LEFT, width=-1)
        self.survey_list.InsertColumn(1, "Stations", format=wx.LIST_FORMAT_LEFT, width=-1)
        self.survey_list.InsertColumn(2, "Legs", format=wx.LIST_FORMAT_LEFT, width=-1)
        self.button_2.SetDefault()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ImportDialog.__do_layout
        sizer_3 = wx.BoxSizer(wx.VERTICAL)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_5 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.StaticBoxSizer(wx.StaticBox(self, wx.ID_ANY, "Surveys"), wx.HORIZONTAL)
        sizer_6.Add(self.survey_list, 1, wx.EXPAND, 0)
        sizer_3.Add(sizer_6, 1, wx.ALL | wx.EXPAND, 3)
        sizer_5.Add(self.edit_btn, 0, 0, 0)
        sizer_5.Add(self.extract_btn, 0, 0, 0)
        sizer_3.Add(sizer_5, 0, wx.ALL, 3)
        sizer_4.Add(self.button_2, 0, 0, 0)
        sizer_4.Add(self.button_3, 0, 0, 0)
        sizer_3.Add(sizer_4, 0, wx.ALIGN_RIGHT | wx.ALL, 3)
        self.SetSizer(sizer_3)
        self.Layout()
        # end wxGlade

# end of class ImportDialog

class DeviceSettingsDialog(wx.Dialog):
    def __init__(self, *args, **kwds):
        # begin wxGlade: DeviceSettingsDialog.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_DIALOG_STYLE
        wx.Dialog.__init__(self, *args, **kwds)
        self.SetSize((304, 251))
        self.length_units = wx.Choice(self, wx.ID_ANY, choices=["Metric", "Imperial"])
        self.angular_units = wx.Choice(self, wx.ID_ANY, choices=["Polar", "Grads", "Cartesian"])
        self.display_size = wx.Choice(self, wx.ID_ANY, choices=["Large", "Small"])
        self.choice_4 = wx.Choice(self, wx.ID_ANY, choices=["30 s", "60 s", "2 mins", "5 mins", "10 mins"])
        self.button_4 = wx.Button(self, wx.ID_OK, "")
        self.button_5 = wx.Button(self, wx.ID_CANCEL, "")

        self.__set_properties()
        self.__do_layout()
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: DeviceSettingsDialog.__set_properties
        self.SetTitle("Device Settings")
        self.SetSize((304, 251))
        self.length_units.SetToolTip(wx.ToolTip("Imperial = results are displayed in decimal feet"))
        self.length_units.SetSelection(0)
        self.angular_units.SetToolTip(wx.ToolTip("Polar - display bearing and inclination in degrees (360 in a circle)\nGrads - display bearing and inclination in grads (400 in a circle)\nCartesian - display distances in easting, northing, and vertical offset"))
        self.angular_units.SetSelection(0)
        self.display_size.SetToolTip(wx.ToolTip("Large - readings are shown one at a time\nSmall - readings are all shown together on one screen"))
        self.display_size.SetSelection(0)
        self.choice_4.SetSelection(2)
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: DeviceSettingsDialog.__do_layout
        sizer_9 = wx.BoxSizer(wx.VERTICAL)
        sizer_10 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_1 = wx.FlexGridSizer(0, 2, 5, 5)
        label_3 = wx.StaticText(self, wx.ID_ANY, "Length Units", style=wx.ALIGN_RIGHT)
        grid_sizer_1.Add(label_3, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.length_units, 0, 0, 0)
        label_4 = wx.StaticText(self, wx.ID_ANY, "Angular Units")
        grid_sizer_1.Add(label_4, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.angular_units, 0, 0, 0)
        label_5 = wx.StaticText(self, wx.ID_ANY, "DIsplay Size")
        grid_sizer_1.Add(label_5, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.display_size, 0, 0, 0)
        label_6 = wx.StaticText(self, wx.ID_ANY, "Time Out")
        grid_sizer_1.Add(label_6, 0, wx.ALIGN_CENTER_VERTICAL | wx.ALIGN_RIGHT, 0)
        grid_sizer_1.Add(self.choice_4, 0, 0, 0)
        sizer_9.Add(grid_sizer_1, 1, wx.ALIGN_CENTER | wx.ALL, 3)
        sizer_10.Add(self.button_4, 0, wx.ALIGN_BOTTOM | wx.ALL, 3)
        sizer_10.Add(self.button_5, 0, wx.ALIGN_BOTTOM | wx.ALL, 3)
        sizer_9.Add(sizer_10, 1, wx.ALIGN_BOTTOM | wx.ALIGN_RIGHT | wx.ALL, 3)
        self.SetSizer(sizer_9)
        self.Layout()
        # end wxGlade

# end of class DeviceSettingsDialog

if __name__ == "__main__":
    PonyTrainer = wx.PySimpleApp()
    frame = MainFrame(None, wx.ID_ANY, "")
    PonyTrainer.SetTopWindow(frame)
    frame.Show()
    PonyTrainer.MainLoop()
